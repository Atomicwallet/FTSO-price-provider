/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CleanupBlockNumberManagerFailedForBlock = ContractEventLog<{
  blockNumber: string;
  0: string;
}>;
export type CleanupBlockNumberManagerUnset = ContractEventLog<{}>;
export type ClosingExpiredRewardEpochFailed = ContractEventLog<{
  _rewardEpoch: string;
  0: string;
}>;
export type ContractRevertError = ContractEventLog<{
  theContract: string;
  atBlock: string;
  theMessage: string;
  0: string;
  1: string;
  2: string;
}>;
export type DistributingRewardsFailed = ContractEventLog<{
  ftso: string;
  epochId: string;
  0: string;
  1: string;
}>;
export type FallbackMode = ContractEventLog<{
  fallbackMode: boolean;
  0: boolean;
}>;
export type FinalizingPriceEpochFailed = ContractEventLog<{
  ftso: string;
  epochId: string;
  failingType: string;
  0: string;
  1: string;
  2: string;
}>;
export type FtsoAdded = ContractEventLog<{
  ftso: string;
  add: boolean;
  0: string;
  1: boolean;
}>;
export type FtsoFallbackMode = ContractEventLog<{
  ftso: string;
  fallbackMode: boolean;
  0: string;
  1: boolean;
}>;
export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;
export type InitializingCurrentEpochStateForRevealFailed = ContractEventLog<{
  ftso: string;
  epochId: string;
  0: string;
  1: string;
}>;
export type PriceEpochFinalized = ContractEventLog<{
  chosenFtso: string;
  rewardEpochId: string;
  0: string;
  1: string;
}>;
export type RewardEpochFinalized = ContractEventLog<{
  votepowerBlock: string;
  startBlock: string;
  0: string;
  1: string;
}>;

export interface FtsoManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FtsoManager;
  clone(): FtsoManager;
  methods: {
    MAX_TRUSTED_ADDRESSES_LENGTH(): NonPayableTransactionObject<string>;

    activate(): NonPayableTransactionObject<void>;

    active(): NonPayableTransactionObject<boolean>;

    addFtso(_ftso: string): NonPayableTransactionObject<void>;

    addRevertError(
      revertedContract: string,
      message: string
    ): NonPayableTransactionObject<void>;

    claimGovernance(): NonPayableTransactionObject<void>;

    cleanupBlockNumberManager(): NonPayableTransactionObject<string>;

    daemonize(): NonPayableTransactionObject<boolean>;

    errorData(): NonPayableTransactionObject<{
      totalRevertedErrors: string;
      lastErrorTypeIndex: string;
      0: string;
      1: string;
    }>;

    flareDaemon(): NonPayableTransactionObject<string>;

    ftsoRegistry(): NonPayableTransactionObject<string>;

    getCurrentPriceEpochData(): NonPayableTransactionObject<{
      priceEpochId: string;
      priceEpochStartTimestamp: string;
      priceEpochEndTimestamp: string;
      priceEpochRevealEndTimestamp: string;
      currentTimestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    getCurrentRewardEpoch(): NonPayableTransactionObject<string>;

    getFallbackMode(): NonPayableTransactionObject<{
      _fallbackMode: boolean;
      _ftsos: string[];
      _ftsoInFallbackMode: boolean[];
      0: boolean;
      1: string[];
      2: boolean[];
    }>;

    getFtsos(): NonPayableTransactionObject<string[]>;

    getPriceEpochConfiguration(): NonPayableTransactionObject<{
      _firstPriceEpochStartTs: string;
      _priceEpochDurationSeconds: string;
      _revealEpochDurationSeconds: string;
      0: string;
      1: string;
      2: string;
    }>;

    getPriceSubmitter(): NonPayableTransactionObject<string>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVotePowerIntervalFraction(): NonPayableTransactionObject<string>;

    governance(): NonPayableTransactionObject<string>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    lastRewardedFtsoAddress(): NonPayableTransactionObject<string>;

    priceSubmitter(): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    removeFtso(_ftso: string): NonPayableTransactionObject<void>;

    replaceFtso(
      _ftsoToRemove: string,
      _ftsoToAdd: string,
      _copyCurrentPrice: boolean,
      _copyAssetOrAssetFtsos: boolean
    ): NonPayableTransactionObject<void>;

    rewardEpochDurationSeconds(): NonPayableTransactionObject<string>;

    rewardEpochs(arg0: number | string | BN): NonPayableTransactionObject<{
      votepowerBlock: string;
      startBlock: string;
      startTimestamp: string;
      0: string;
      1: string;
      2: string;
    }>;

    rewardEpochsStartTs(): NonPayableTransactionObject<string>;

    rewardManager(): NonPayableTransactionObject<string>;

    setContractAddresses(
      _rewardManager: string,
      _ftsoRegistry: string,
      _voterWhitelister: string,
      _supply: string,
      _cleanupBlockNumberManager: string
    ): NonPayableTransactionObject<void>;

    setFallbackMode(_fallbackMode: boolean): NonPayableTransactionObject<void>;

    setFtsoAsset(
      _ftso: string,
      _asset: string
    ): NonPayableTransactionObject<void>;

    setFtsoAssetFtsos(
      _ftso: string,
      _assetFtsos: string[]
    ): NonPayableTransactionObject<void>;

    setFtsoFallbackMode(
      _ftso: string,
      _fallbackMode: boolean
    ): NonPayableTransactionObject<void>;

    setGovernanceParameters(
      _maxVotePowerNatThresholdFraction: number | string | BN,
      _maxVotePowerAssetThresholdFraction: number | string | BN,
      _lowAssetUSDThreshold: number | string | BN,
      _highAssetUSDThreshold: number | string | BN,
      _highAssetTurnoutThresholdBIPS: number | string | BN,
      _lowNatTurnoutThresholdBIPS: number | string | BN,
      _rewardExpiryOffsetSeconds: number | string | BN,
      _trustedAddresses: string[]
    ): NonPayableTransactionObject<void>;

    settings(): NonPayableTransactionObject<{
      maxVotePowerNatThresholdFraction: string;
      maxVotePowerAssetThresholdFraction: string;
      lowAssetUSDThreshold: string;
      highAssetUSDThreshold: string;
      highAssetTurnoutThresholdBIPS: string;
      lowNatTurnoutThresholdBIPS: string;
      rewardExpiryOffsetSeconds: string;
      changed: boolean;
      initialized: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: boolean;
      8: boolean;
    }>;

    showLastRevertedError(): NonPayableTransactionObject<{
      _lastErrorBlock: string[];
      _numErrors: string[];
      _errorString: string[];
      _erroringContract: string[];
      _totalRevertedErrors: string;
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string;
    }>;

    showRevertedErrors(
      startIndex: number | string | BN,
      numErrorTypesToShow: number | string | BN
    ): NonPayableTransactionObject<{
      _lastErrorBlock: string[];
      _numErrors: string[];
      _errorString: string[];
      _erroringContract: string[];
      _totalRevertedErrors: string;
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string;
    }>;

    supply(): NonPayableTransactionObject<string>;

    switchToFallbackMode(): NonPayableTransactionObject<boolean>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    voterWhitelister(): NonPayableTransactionObject<string>;
  };
  events: {
    CleanupBlockNumberManagerFailedForBlock(
      cb?: Callback<CleanupBlockNumberManagerFailedForBlock>
    ): EventEmitter;
    CleanupBlockNumberManagerFailedForBlock(
      options?: EventOptions,
      cb?: Callback<CleanupBlockNumberManagerFailedForBlock>
    ): EventEmitter;

    CleanupBlockNumberManagerUnset(
      cb?: Callback<CleanupBlockNumberManagerUnset>
    ): EventEmitter;
    CleanupBlockNumberManagerUnset(
      options?: EventOptions,
      cb?: Callback<CleanupBlockNumberManagerUnset>
    ): EventEmitter;

    ClosingExpiredRewardEpochFailed(
      cb?: Callback<ClosingExpiredRewardEpochFailed>
    ): EventEmitter;
    ClosingExpiredRewardEpochFailed(
      options?: EventOptions,
      cb?: Callback<ClosingExpiredRewardEpochFailed>
    ): EventEmitter;

    ContractRevertError(cb?: Callback<ContractRevertError>): EventEmitter;
    ContractRevertError(
      options?: EventOptions,
      cb?: Callback<ContractRevertError>
    ): EventEmitter;

    DistributingRewardsFailed(
      cb?: Callback<DistributingRewardsFailed>
    ): EventEmitter;
    DistributingRewardsFailed(
      options?: EventOptions,
      cb?: Callback<DistributingRewardsFailed>
    ): EventEmitter;

    FallbackMode(cb?: Callback<FallbackMode>): EventEmitter;
    FallbackMode(
      options?: EventOptions,
      cb?: Callback<FallbackMode>
    ): EventEmitter;

    FinalizingPriceEpochFailed(
      cb?: Callback<FinalizingPriceEpochFailed>
    ): EventEmitter;
    FinalizingPriceEpochFailed(
      options?: EventOptions,
      cb?: Callback<FinalizingPriceEpochFailed>
    ): EventEmitter;

    FtsoAdded(cb?: Callback<FtsoAdded>): EventEmitter;
    FtsoAdded(options?: EventOptions, cb?: Callback<FtsoAdded>): EventEmitter;

    FtsoFallbackMode(cb?: Callback<FtsoFallbackMode>): EventEmitter;
    FtsoFallbackMode(
      options?: EventOptions,
      cb?: Callback<FtsoFallbackMode>
    ): EventEmitter;

    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    InitializingCurrentEpochStateForRevealFailed(
      cb?: Callback<InitializingCurrentEpochStateForRevealFailed>
    ): EventEmitter;
    InitializingCurrentEpochStateForRevealFailed(
      options?: EventOptions,
      cb?: Callback<InitializingCurrentEpochStateForRevealFailed>
    ): EventEmitter;

    PriceEpochFinalized(cb?: Callback<PriceEpochFinalized>): EventEmitter;
    PriceEpochFinalized(
      options?: EventOptions,
      cb?: Callback<PriceEpochFinalized>
    ): EventEmitter;

    RewardEpochFinalized(cb?: Callback<RewardEpochFinalized>): EventEmitter;
    RewardEpochFinalized(
      options?: EventOptions,
      cb?: Callback<RewardEpochFinalized>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "CleanupBlockNumberManagerFailedForBlock",
    cb: Callback<CleanupBlockNumberManagerFailedForBlock>
  ): void;
  once(
    event: "CleanupBlockNumberManagerFailedForBlock",
    options: EventOptions,
    cb: Callback<CleanupBlockNumberManagerFailedForBlock>
  ): void;

  once(
    event: "CleanupBlockNumberManagerUnset",
    cb: Callback<CleanupBlockNumberManagerUnset>
  ): void;
  once(
    event: "CleanupBlockNumberManagerUnset",
    options: EventOptions,
    cb: Callback<CleanupBlockNumberManagerUnset>
  ): void;

  once(
    event: "ClosingExpiredRewardEpochFailed",
    cb: Callback<ClosingExpiredRewardEpochFailed>
  ): void;
  once(
    event: "ClosingExpiredRewardEpochFailed",
    options: EventOptions,
    cb: Callback<ClosingExpiredRewardEpochFailed>
  ): void;

  once(event: "ContractRevertError", cb: Callback<ContractRevertError>): void;
  once(
    event: "ContractRevertError",
    options: EventOptions,
    cb: Callback<ContractRevertError>
  ): void;

  once(
    event: "DistributingRewardsFailed",
    cb: Callback<DistributingRewardsFailed>
  ): void;
  once(
    event: "DistributingRewardsFailed",
    options: EventOptions,
    cb: Callback<DistributingRewardsFailed>
  ): void;

  once(event: "FallbackMode", cb: Callback<FallbackMode>): void;
  once(
    event: "FallbackMode",
    options: EventOptions,
    cb: Callback<FallbackMode>
  ): void;

  once(
    event: "FinalizingPriceEpochFailed",
    cb: Callback<FinalizingPriceEpochFailed>
  ): void;
  once(
    event: "FinalizingPriceEpochFailed",
    options: EventOptions,
    cb: Callback<FinalizingPriceEpochFailed>
  ): void;

  once(event: "FtsoAdded", cb: Callback<FtsoAdded>): void;
  once(
    event: "FtsoAdded",
    options: EventOptions,
    cb: Callback<FtsoAdded>
  ): void;

  once(event: "FtsoFallbackMode", cb: Callback<FtsoFallbackMode>): void;
  once(
    event: "FtsoFallbackMode",
    options: EventOptions,
    cb: Callback<FtsoFallbackMode>
  ): void;

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(
    event: "InitializingCurrentEpochStateForRevealFailed",
    cb: Callback<InitializingCurrentEpochStateForRevealFailed>
  ): void;
  once(
    event: "InitializingCurrentEpochStateForRevealFailed",
    options: EventOptions,
    cb: Callback<InitializingCurrentEpochStateForRevealFailed>
  ): void;

  once(event: "PriceEpochFinalized", cb: Callback<PriceEpochFinalized>): void;
  once(
    event: "PriceEpochFinalized",
    options: EventOptions,
    cb: Callback<PriceEpochFinalized>
  ): void;

  once(event: "RewardEpochFinalized", cb: Callback<RewardEpochFinalized>): void;
  once(
    event: "RewardEpochFinalized",
    options: EventOptions,
    cb: Callback<RewardEpochFinalized>
  ): void;
}
